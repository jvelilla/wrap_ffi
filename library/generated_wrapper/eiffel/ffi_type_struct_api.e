note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class FFI_TYPE_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	size: INTEGER
			-- Access member `size`
		require
			exists: exists
		do
			Result := c_size (item)
		ensure
			result_correct: Result = c_size (item)
		end

	set_size (a_value: INTEGER) 
			-- Change the value of member `size` to `a_value`.
		require
			exists: exists
		do
			set_c_size (item, a_value)
		ensure
			size_set: a_value = size
		end

	alignment: INTEGER
			-- Access member `alignment`
		require
			exists: exists
		do
			Result := c_alignment (item)
		ensure
			result_correct: Result = c_alignment (item)
		end

	set_alignment (a_value: INTEGER) 
			-- Change the value of member `alignment` to `a_value`.
		require
			exists: exists
		do
			set_c_alignment (item, a_value)
		ensure
			alignment_set: a_value = alignment
		end

	type: INTEGER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item)
		ensure
			result_correct: Result = c_type (item)
		end

	set_type (a_value: INTEGER) 
			-- Change the value of member `type` to `a_value`.
		require
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: a_value = type
		end

	elements: FFI_TYPE_STRUCT_API
			-- Access member `elements`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_elements(item) )
		ensure
			result_not_void: Result.item = c_elements (item) 
		end

	set_elements (a_value: FFI_TYPE_STRUCT_API) 
			-- Set member `elements`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_elements (item, a_value.item)
		ensure
			elements_set: elements.item = a_value.item
		end

feature {NONE} -- Implementation wrapper for struct struct _ffi_type

	sizeof_external: INTEGER 
		external
			"C inline use <ffi.h>"
		alias
			"sizeof(struct _ffi_type)"
		end

	c_size (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((struct _ffi_type*)$an_item)->size
			]"
		end

	set_c_size (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((struct _ffi_type*)$an_item)->size =  (size_t)$a_value
			]"
		ensure
			size_set: a_value = c_size (an_item)
		end

	c_alignment (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((struct _ffi_type*)$an_item)->alignment
			]"
		end

	set_c_alignment (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((struct _ffi_type*)$an_item)->alignment =  (unsigned short)$a_value
			]"
		ensure
			alignment_set: a_value = c_alignment (an_item)
		end

	c_type (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((struct _ffi_type*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((struct _ffi_type*)$an_item)->type =  (unsigned short)$a_value
			]"
		ensure
			type_set: a_value = c_type (an_item)
		end

	c_elements (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((struct _ffi_type*)$an_item)->elements
			]"
		end

	set_c_elements (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((struct _ffi_type*)$an_item)->elements =  (struct _ffi_type**)$a_value
			]"
		ensure
			elements_set: a_value = c_elements (an_item)
		end

end
