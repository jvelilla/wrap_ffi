note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"
-- functions wrapper
class FFI_FUNCTIONS_API


feature -- Access

--	ffi_prep_cif_core (cif: FFI_CIF_STRUCT_API; abi: INTEGER; isvariadic: INTEGER; nfixedargs: INTEGER; ntotalargs: INTEGER; rtype: FFI_TYPE_STRUCT_API; atypes: FFI_TYPE_STRUCT_API): INTEGER
--		do
--			Result := c_ffi_prep_cif_core (cif.item, abi, isvariadic, nfixedargs, ntotalargs, rtype.item, atypes.item)
--		end

	ffi_raw_call (cif: FFI_CIF_STRUCT_API; fn: POINTER; rvalue: POINTER; avalue: FFI_RAW_UNION_API)
		do
			c_ffi_raw_call (cif.item, fn, rvalue, avalue.item)
		end

	ffi_ptrarray_to_raw (cif: FFI_CIF_STRUCT_API; args: POINTER; raw: FFI_RAW_UNION_API)
		do
			c_ffi_ptrarray_to_raw (cif.item, args, raw.item)
		end

	ffi_raw_to_ptrarray (cif: FFI_CIF_STRUCT_API; raw: FFI_RAW_UNION_API; args: POINTER)
		do
			c_ffi_raw_to_ptrarray (cif.item, raw.item, args)
		end

	ffi_raw_size (cif: FFI_CIF_STRUCT_API): INTEGER
		do
			Result := c_ffi_raw_size (cif.item)
		end

	ffi_java_raw_call (cif: FFI_CIF_STRUCT_API; fn: POINTER; rvalue: POINTER; avalue: FFI_RAW_UNION_API)
		do
			c_ffi_java_raw_call (cif.item, fn, rvalue, avalue.item)
		end

	ffi_java_ptrarray_to_raw (cif: FFI_CIF_STRUCT_API; args: POINTER; raw: FFI_RAW_UNION_API)
		do
			c_ffi_java_ptrarray_to_raw (cif.item, args, raw.item)
		end

	ffi_java_raw_to_ptrarray (cif: FFI_CIF_STRUCT_API; raw: FFI_RAW_UNION_API; args: POINTER)
		do
			c_ffi_java_raw_to_ptrarray (cif.item, raw.item, args)
		end

	ffi_java_raw_size (cif: FFI_CIF_STRUCT_API): INTEGER
		do
			Result := c_ffi_java_raw_size (cif.item)
		end

	ffi_closure_alloc (size: INTEGER; code: POINTER): POINTER
		do
			Result := c_ffi_closure_alloc (size, code)
		end

	ffi_closure_free (anonymous_1: POINTER)
		do
			c_ffi_closure_free (anonymous_1)
		end

	ffi_prep_closure (anonymous_1: FFI_CLOSURE_STRUCT_API; anonymous_2: FFI_CIF_STRUCT_API; fun: POINTER; user_data: POINTER): INTEGER
		do
			Result := c_ffi_prep_closure (anonymous_1.item, anonymous_2.item, fun, user_data)
		end

	ffi_prep_closure_loc (anonymous_1: FFI_CLOSURE_STRUCT_API; anonymous_2: FFI_CIF_STRUCT_API; fun: POINTER; user_data: POINTER; codeloc: POINTER): INTEGER
		do
			Result := c_ffi_prep_closure_loc (anonymous_1.item, anonymous_2.item, fun, user_data, codeloc)
		end

	ffi_prep_raw_closure (anonymous_1: FFI_RAW_CLOSURE_STRUCT_API; cif: FFI_CIF_STRUCT_API; fun: POINTER; user_data: POINTER): INTEGER
		do
			Result := c_ffi_prep_raw_closure (anonymous_1.item, cif.item, fun, user_data)
		end

	ffi_prep_raw_closure_loc (anonymous_1: FFI_RAW_CLOSURE_STRUCT_API; cif: FFI_CIF_STRUCT_API; fun: POINTER; user_data: POINTER; codeloc: POINTER): INTEGER
		do
			Result := c_ffi_prep_raw_closure_loc (anonymous_1.item, cif.item, fun, user_data, codeloc)
		end

	ffi_prep_java_raw_closure (anonymous_1: FFI_JAVA_RAW_CLOSURE_STRUCT_API; cif: FFI_CIF_STRUCT_API; fun: POINTER; user_data: POINTER): INTEGER
		do
			Result := c_ffi_prep_java_raw_closure (anonymous_1.item, cif.item, fun, user_data)
		end

	ffi_prep_java_raw_closure_loc (anonymous_1: FFI_JAVA_RAW_CLOSURE_STRUCT_API; cif: FFI_CIF_STRUCT_API; fun: POINTER; user_data: POINTER; codeloc: POINTER): INTEGER
		do
			Result := c_ffi_prep_java_raw_closure_loc (anonymous_1.item, cif.item, fun, user_data, codeloc)
		end

	ffi_prep_cif (cif: FFI_CIF_STRUCT_API; abi: INTEGER; nargs: INTEGER; rtype: FFI_TYPE_STRUCT_API; atypes: FFI_TYPE_STRUCT_API): INTEGER
		do
			Result := c_ffi_prep_cif (cif.item, abi, nargs, rtype.item, atypes.item)
		end

	ffi_prep_cif_var (cif: FFI_CIF_STRUCT_API; abi: INTEGER; nfixedargs: INTEGER; ntotalargs: INTEGER; rtype: FFI_TYPE_STRUCT_API; atypes: FFI_TYPE_STRUCT_API): INTEGER
		do
			Result := c_ffi_prep_cif_var (cif.item, abi, nfixedargs, ntotalargs, rtype.item, atypes.item)
		end

	ffi_call (cif: FFI_CIF_STRUCT_API; fn: POINTER; rvalue: POINTER; avalue: POINTER)
		do
			c_ffi_call (cif.item, fn, rvalue, avalue)
		end

feature -- Externals

--	c_ffi_prep_cif_core (cif: POINTER; abi: INTEGER; isvariadic: INTEGER; nfixedargs: INTEGER; ntotalargs: INTEGER; rtype: POINTER; atypes: POINTER): INTEGER
--		external
--			"C inline use <ffi.h>"
--		alias
--			"[
--				return ffi_prep_cif_core ((ffi_cif*)$cif, (ffi_abi)$abi, (unsigned int)$isvariadic, (unsigned int)$nfixedargs, (unsigned int)$ntotalargs, (ffi_type*)$rtype, (ffi_type**)$atypes);
--			]"
--		end

	c_ffi_raw_call (cif: POINTER; fn: POINTER; rvalue: POINTER; avalue: POINTER)
		external
			"C inline use <ffi.h>"
		alias
			"[
				ffi_raw_call ((ffi_cif*)$cif, (void (*) ())$fn, (void*)$rvalue, (ffi_raw*)$avalue);
			]"
		end

	c_ffi_ptrarray_to_raw (cif: POINTER; args: POINTER; raw: POINTER)
		external
			"C inline use <ffi.h>"
		alias
			"[
				ffi_ptrarray_to_raw ((ffi_cif*)$cif, (void**)$args, (ffi_raw*)$raw);
			]"
		end

	c_ffi_raw_to_ptrarray (cif: POINTER; raw: POINTER; args: POINTER)
		external
			"C inline use <ffi.h>"
		alias
			"[
				ffi_raw_to_ptrarray ((ffi_cif*)$cif, (ffi_raw*)$raw, (void**)$args);
			]"
		end

	c_ffi_raw_size (cif: POINTER): INTEGER
		external
			"C inline use <ffi.h>"
		alias
			"[
				return ffi_raw_size ((ffi_cif*)$cif);
			]"
		end

	c_ffi_java_raw_call (cif: POINTER; fn: POINTER; rvalue: POINTER; avalue: POINTER)
		external
			"C inline use <ffi.h>"
		alias
			"[
				ffi_java_raw_call ((ffi_cif*)$cif, (void (*) ())$fn, (void*)$rvalue, (ffi_java_raw*)$avalue);
			]"
		end

	c_ffi_java_ptrarray_to_raw (cif: POINTER; args: POINTER; raw: POINTER)
		external
			"C inline use <ffi.h>"
		alias
			"[
				ffi_java_ptrarray_to_raw ((ffi_cif*)$cif, (void**)$args, (ffi_java_raw*)$raw);
			]"
		end

	c_ffi_java_raw_to_ptrarray (cif: POINTER; raw: POINTER; args: POINTER)
		external
			"C inline use <ffi.h>"
		alias
			"[
				ffi_java_raw_to_ptrarray ((ffi_cif*)$cif, (ffi_java_raw*)$raw, (void**)$args);
			]"
		end

	c_ffi_java_raw_size (cif: POINTER): INTEGER
		external
			"C inline use <ffi.h>"
		alias
			"[
				return ffi_java_raw_size ((ffi_cif*)$cif);
			]"
		end

	c_ffi_closure_alloc (size: INTEGER; code: POINTER): POINTER
		external
			"C inline use <ffi.h>"
		alias
			"[
				return ffi_closure_alloc ((size_t)$size, (void**)$code);
			]"
		end

	c_ffi_closure_free (anonymous_1: POINTER)
		external
			"C inline use <ffi.h>"
		alias
			"[
				ffi_closure_free ((void*)$anonymous_1);
			]"
		end

	c_ffi_prep_closure (anonymous_1: POINTER; anonymous_2: POINTER; fun: POINTER; user_data: POINTER): INTEGER
		external
			"C inline use <ffi.h>"
		alias
			"[
				return ffi_prep_closure ((ffi_closure*)$anonymous_1, (ffi_cif*)$anonymous_2, (void (*) (ffi_cif *anonymous_1, void *anonymous_2, void **anonymous_3, void *anonymous_4))$fun, (void*)$user_data);
			]"
		end

	c_ffi_prep_closure_loc (anonymous_1: POINTER; anonymous_2: POINTER; fun: POINTER; user_data: POINTER; codeloc: POINTER): INTEGER
		external
			"C inline use <ffi.h>"
		alias
			"[
				return ffi_prep_closure_loc ((ffi_closure*)$anonymous_1, (ffi_cif*)$anonymous_2, (void (*) (ffi_cif *anonymous_1, void *anonymous_2, void **anonymous_3, void *anonymous_4))$fun, (void*)$user_data, (void*)$codeloc);
			]"
		end

	c_ffi_prep_raw_closure (anonymous_1: POINTER; cif: POINTER; fun: POINTER; user_data: POINTER): INTEGER
		external
			"C inline use <ffi.h>"
		alias
			"[
				return ffi_prep_raw_closure ((ffi_raw_closure*)$anonymous_1, (ffi_cif*)$cif, (void (*) (ffi_cif *anonymous_1, void *anonymous_2, ffi_raw *anonymous_3, void *anonymous_4))$fun, (void*)$user_data);
			]"
		end

	c_ffi_prep_raw_closure_loc (anonymous_1: POINTER; cif: POINTER; fun: POINTER; user_data: POINTER; codeloc: POINTER): INTEGER
		external
			"C inline use <ffi.h>"
		alias
			"[
				return ffi_prep_raw_closure_loc ((ffi_raw_closure*)$anonymous_1, (ffi_cif*)$cif, (void (*) (ffi_cif *anonymous_1, void *anonymous_2, ffi_raw *anonymous_3, void *anonymous_4))$fun, (void*)$user_data, (void*)$codeloc);
			]"
		end

	c_ffi_prep_java_raw_closure (anonymous_1: POINTER; cif: POINTER; fun: POINTER; user_data: POINTER): INTEGER
		external
			"C inline use <ffi.h>"
		alias
			"[
				return ffi_prep_java_raw_closure ((ffi_java_raw_closure*)$anonymous_1, (ffi_cif*)$cif, (void (*) (ffi_cif *anonymous_1, void *anonymous_2, ffi_java_raw *anonymous_3, void *anonymous_4))$fun, (void*)$user_data);
			]"
		end

	c_ffi_prep_java_raw_closure_loc (anonymous_1: POINTER; cif: POINTER; fun: POINTER; user_data: POINTER; codeloc: POINTER): INTEGER
		external
			"C inline use <ffi.h>"
		alias
			"[
				return ffi_prep_java_raw_closure_loc ((ffi_java_raw_closure*)$anonymous_1, (ffi_cif*)$cif, (void (*) (ffi_cif *anonymous_1, void *anonymous_2, ffi_java_raw *anonymous_3, void *anonymous_4))$fun, (void*)$user_data, (void*)$codeloc);
			]"
		end

	c_ffi_prep_cif (cif: POINTER; abi: INTEGER; nargs: INTEGER; rtype: POINTER; atypes: POINTER): INTEGER
		external
			"C inline use <ffi.h>"
		alias
			"[
				return ffi_prep_cif ((ffi_cif*)$cif, (ffi_abi)$abi, (unsigned int)$nargs, (ffi_type*)$rtype, (ffi_type**)$atypes);
			]"
		end

	c_ffi_prep_cif_var (cif: POINTER; abi: INTEGER; nfixedargs: INTEGER; ntotalargs: INTEGER; rtype: POINTER; atypes: POINTER): INTEGER
		external
			"C inline use <ffi.h>"
		alias
			"[
				return ffi_prep_cif_var ((ffi_cif*)$cif, (ffi_abi)$abi, (unsigned int)$nfixedargs, (unsigned int)$ntotalargs, (ffi_type*)$rtype, (ffi_type**)$atypes);
			]"
		end

	c_ffi_call (cif: POINTER; fn: POINTER; rvalue: POINTER; avalue: POINTER)
		external
			"C inline use <ffi.h>"
		alias
			"[
				ffi_call ((ffi_cif*)$cif, (void (*) ())$fn, (void*)$rvalue, (void**)$avalue);
			]"
		end

feature -- Externals Address

end
