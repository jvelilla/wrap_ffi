note

	description: "This file has been generated by EWG. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class FFI_CIF_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	abi: INTEGER
			-- Access member `abi`
		require
			exists: exists
		do
			Result := c_abi (item)
		ensure
			result_correct: Result = c_abi (item)
		end

	set_abi (a_value: INTEGER) 
			-- Change the value of member `abi` to `a_value`.
		require
			exists: exists
		do
			set_c_abi (item, a_value)
		ensure
			abi_set: a_value = abi
		end

	nargs: INTEGER
			-- Access member `nargs`
		require
			exists: exists
		do
			Result := c_nargs (item)
		ensure
			result_correct: Result = c_nargs (item)
		end

	set_nargs (a_value: INTEGER) 
			-- Change the value of member `nargs` to `a_value`.
		require
			exists: exists
		do
			set_c_nargs (item, a_value)
		ensure
			nargs_set: a_value = nargs
		end

	arg_types: FFI_TYPE_STRUCT_API
			-- Access member `arg_types`
		require
			exists: exists
		do
			create Result.make_by_pointer ( c_arg_types(item) )
		ensure
			result_not_void: Result.item = c_arg_types (item) 
		end

	set_arg_types (a_value: FFI_TYPE_STRUCT_API) 
			-- Set member `arg_types`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_arg_types (item, a_value.item)
		ensure
			arg_types_set: arg_types.item = a_value.item
		end

	rtype: detachable FFI_TYPE_STRUCT_API 
			-- Access member `rtype`
		require
			exists: exists
		do
			if attached c_rtype (item) as l_ptr and then not l_ptr.is_default_pointer then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_rtype (item) = default_pointer 
			result_not_void: attached Result as l_result implies l_result.item = c_rtype (item) 
		end

	set_rtype (a_value: FFI_TYPE_STRUCT_API) 
			-- Set member `rtype`
		require
			a_value_not_void: a_value /= Void
			exists: exists
		do
			set_c_rtype (item, a_value.item)
		ensure
			rtype_set: attached rtype as l_value implies l_value.item = a_value.item
		end

	bytes: INTEGER
			-- Access member `bytes`
		require
			exists: exists
		do
			Result := c_bytes (item)
		ensure
			result_correct: Result = c_bytes (item)
		end

	set_bytes (a_value: INTEGER) 
			-- Change the value of member `bytes` to `a_value`.
		require
			exists: exists
		do
			set_c_bytes (item, a_value)
		ensure
			bytes_set: a_value = bytes
		end

	flags: INTEGER
			-- Access member `flags`
		require
			exists: exists
		do
			Result := c_flags (item)
		ensure
			result_correct: Result = c_flags (item)
		end

	set_flags (a_value: INTEGER) 
			-- Change the value of member `flags` to `a_value`.
		require
			exists: exists
		do
			set_c_flags (item, a_value)
		ensure
			flags_set: a_value = flags
		end

feature {NONE} -- Implementation wrapper for struct ffi_cif

	sizeof_external: INTEGER 
		external
			"C inline use <ffi.h>"
		alias
			"sizeof(ffi_cif)"
		end

	c_abi (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((ffi_cif*)$an_item)->abi
			]"
		end

	set_c_abi (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((ffi_cif*)$an_item)->abi =  (ffi_abi)$a_value
			]"
		ensure
			abi_set: a_value = c_abi (an_item)
		end

	c_nargs (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((ffi_cif*)$an_item)->nargs
			]"
		end

	set_c_nargs (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((ffi_cif*)$an_item)->nargs =  (unsigned)$a_value
			]"
		ensure
			nargs_set: a_value = c_nargs (an_item)
		end

	c_arg_types (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((ffi_cif*)$an_item)->arg_types
			]"
		end

	set_c_arg_types (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((ffi_cif*)$an_item)->arg_types =  (ffi_type**)$a_value
			]"
		ensure
			arg_types_set: a_value = c_arg_types (an_item)
		end

	c_rtype (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((ffi_cif*)$an_item)->rtype
			]"
		end

	set_c_rtype (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((ffi_cif*)$an_item)->rtype =  (ffi_type*)$a_value
			]"
		ensure
			rtype_set: a_value = c_rtype (an_item)
		end

	c_bytes (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((ffi_cif*)$an_item)->bytes
			]"
		end

	set_c_bytes (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((ffi_cif*)$an_item)->bytes =  (unsigned)$a_value
			]"
		ensure
			bytes_set: a_value = c_bytes (an_item)
		end

	c_flags (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((ffi_cif*)$an_item)->flags
			]"
		end

	set_c_flags (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <ffi.h>"
		alias
			"[
				((ffi_cif*)$an_item)->flags =  (unsigned)$a_value
			]"
		ensure
			flags_set: a_value = c_flags (an_item)
		end

end
